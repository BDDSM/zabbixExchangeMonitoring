#Область РаботаСНастройками

Функция КлючХранилищаНастроекМониторингаОбменов() Экспорт
	Возврат "201908081257ZabbixExchangeMonitor";
КонецФункции

Функция ПолучитьНастройкиМониторингаОбменов() Экспорт
	ключ = КлючХранилищаНастроекМониторингаОбменов();
	значение = ХранилищеОбщихНастроек.Загрузить(
			ключ,
			ключ,
			Неопределено,
			""
	);
		
	настройки = СтруктураНастроекМониторнигаОбменов();
	Если ЗначениеЗаполнено(значение) Тогда
		ЗаполнитьЗначенияСвойств(настройки, значение);
	КонецЕсли;
		
	Возврат настройки;
КонецФункции	

Процедура СохранитьНастройкиМониторингаОбменов(настройки) Экспорт
	ключ = КлючХранилищаНастроекМониторингаОбменов();
	ХранилищеОбщихНастроек.Сохранить(
			ключ,
			ключ,
			настройки,
			Неопределено,
			""
	);		
КонецПроцедуры

Функция СтруктураНастроекМониторнигаОбменов() Экспорт	
	Возврат Новый Структура("
							//сервер Zabbix
							| Сервер,
							//порт Zabbix
							| Порт,
							//адрес сервиса вызова api Zabbix
							| Сервис,							
							//Login/password для авторизации при вызове api Zabbix 
							| Login,
							| Password,
							//время ожидания ответа при вызове API Zabbix
							| Таймаут, 
							//Корневым узлом мониторинга Zabbix является Host
							//на который навешиваются элементы мониторинга
							//соответственно Host создается средствами администрирования Zabbix
							//и его ID помещается в настройки мониторинга для автоматической регистрации
							//элементов мониторинга по узлам обмена
							| HostID,
							//для мониторинга состояния обменов 
							//используется HTTPagent Zabbix, который опрашивает 1С 
							//состояния обменов в разрезе узлов вызывая соответствующее API
							//HTTP сервиса 1С
							| UrlСервисаМониторинга1С,
							//Логин/пароль доступа к сервису 1С
							| Логин1С,
							| Пароль1С,
							//время ожидания ответа от сервиса мониторинга 1С на стороне Zabbix
							| Таймаут1С,
							//частота опроса сервиса 1С агентом Zabbix
							| ПериодОпроса1С,
							| ПорогСрабатывания,
							| ПорогСрабатыванияДО", 
				"elastic.dominantsugar.ru",
				8081,
				"api_jsonrpc.php",
				"Admin",
				"zabbix",
				20,
				99999,
				"192.168.45.197",
				"",
				"",
				20,
				30,
				5,
				100
	);
КонецФункции

#КонецОбласти

Процедура ОтправитьEmail(текст, мПолучатели)
	структураОтправителя = Новый Структура("Наименование, Адрес", "1CService@dominantsugar.ru", "1CService@dominantsugar.ru");
		
	дмнЭлектроннаяПочта.ОтправитьСообщениеПолучателю(
		"Мониторинг очередей обменов:"+СтрокаСоединенияИнформационнойБазы(),
		текст.ПолучитьТекст(),
		структураОтправителя,
		мПолучатели)
КонецПроцедуры

#Область MonitoringInterface

Процедура ВыполнитьАнализОчередейСообщений() Экспорт
#Область ТестСхемы
	//схемаЗапросаТест = Новый СхемаЗапроса;
	//схемаЗапросаТест.УстановитьТекстЗапроса("ВЫБРАТЬ
	//                                        |	Данные.Узел КАК Узел,
	//										|	ПРЕДСТАВЛЕНИЕ(Данные.Узел) КАК Представление,
	//                                        |	Данные.НомерСообщения КАК КоличествоОбменов
	//                                        |ИЗ
	//                                        |	Справочник.дмнУзлы.Изменения КАК Данные
	//										|ГДЕ	                                        
	//                                        |	ЕСТЬNULL(Данные.НомерСообщения, 0) > 0
	//                                        |	                                        
	//                                        |ОБЪЕДИНИТЬ ВСЕ
	//                                        |
	//                                        |ВЫБРАТЬ
	//                                        |	Данные.Узел,
	//										|	ПРЕДСТАВЛЕНИЕ(Данные.Узел),
	//                                        |	Данные.НомерСообщения
	//                                        |ИЗ
	//                                        |	Справочник.Номенклатура.Изменения КАК Данные
	//                                        |ГДЕ
	//                                        |	Данные.Узел ССЫЛКА ПланОбмена.дмнБСХП_БСХП
	//                                        |	И ЕСТЬNULL(Данные.НомерСообщения, 0) > 0
	//                                        |											
	//										|ИТОГИ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КоличествоОбменов) ПО Узел
	//										|");
#КонецОбласти

	настройки = ПолучитьНастройкиМониторингаОбменов();
	Если настройки.ИспользоватьЛогирование = Истина Тогда
		файл = Новый Файл;
		Если файл.Существует() Тогда
			УдалитьФайлы(файл.ПолноеИмя);
		КонецЕсли;	
	КонецЕсли;		
		
	лог = Новый ТекстовыйДокумент;
	sendLog = Ложь;
	
	метаПланыОбмена = Метаданные.ПланыОбмена;

	Для Каждого метаПланОбмена Из метаПланыОбмена Цикл
		//этот кусок кода в получении не отправленных сообщений по узлу
		//практически полностью дублируется за исключением параметра &Узел,
		//но не вынесен в отдельную процедуру, т.к. в этом случае позволяет
		//выбрать состояние обменов по всем узлам конкретного плана в разрезе узлов,
		//а формирование универсального запроса сделает код менее читаемым
		Если метаПланОбмена.Состав.Количество() = 0 Тогда
			//план обмена не регистрирует изменения
			Продолжить;
		КонецЕсли;
		
		имяПланаОбмена 	= метаПланОбмена.Имя;
		полноеИмяПланаОбмена = метаПланОбмена.ПолноеИмя();
		схемаЗапроса 	= Новый СхемаЗапроса;		
		первыйЗапрос 	= Истина;
		пакетЗапросов	= схемаЗапроса.ПакетЗапросов[0];
		операторы 		= пакетЗапросов.Операторы;
		операторы.Очистить();
		колонки			= пакетЗапросов.Колонки;		
		
		Для Каждого элт Из метаПланОбмена.Состав Цикл
			метаЭлт = элт.Метаданные;
			полноеИмя = метаЭлт.ПолноеИмя();
			Если первыйЗапрос Тогда
				оператор = операторы[0]; //присутствует в схеме по-умолчанию
				первыйЗапрос = Ложь;
			Иначе
				оператор = операторы.Добавить();
			КонецЕсли;
			
			источники 	= оператор.Источники;
			поля 		= оператор.ВыбираемыеПоля;
			отборы = оператор.Отбор;
			
			источник = источники.Добавить(полноеИмя+".Изменения", "Данные");
			количествоПлановОбмена = источник.Источник.ДоступныеПоля.Найти("Узел").ТипЗначения.Типы().Количество();
			
			поля.Добавить("Данные.Узел");
			поля.Добавить("ПРЕДСТАВЛЕНИЕ(Данные.Узел)");
			поля.Добавить("Данные.НомерСообщения");			
						
			Если количествоПлановОбмена > 1 Тогда
				отборы.Добавить("Данные.Узел ССЫЛКА "+полноеИмяПланаОбмена);
			КонецЕсли;
			отборы.Добавить("isnull(Данные.НомерСообщения, 0) > 0");
		КонецЦикла;
		
		колонкаУзел 			= колонки.Получить(0);
		колонкаПредставление	= колонки.Получить(1);
		колонкаПредставление.Псевдоним = "Представление";
		колонкаНомерСообщения 	= колонки.Получить(2);
		колонкаНомерСообщения.Псевдоним = "КоличествоНеПодтвержденных";
		
		итоги = пакетЗапросов.ВыраженияИтогов;
		итоги.Добавить("КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КоличествоНеПодтвержденных)", "КоличествоНеПодтвержденных");
		
		контрольныеТочкиИтогов = пакетЗапросов.КонтрольныеТочкиИтогов;
		контрольныеТочкиИтогов.Добавить("Узел");
		
		запрос = Новый Запрос(схемаЗапроса.ПолучитьТекстЗапроса());
		//запрос.УстановитьПараметр("Порог", настройки.ПорогСрабатывания);
		
		выб = запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Узел");
		Пока выб.Следующий() Цикл
			Если выб.КоличествоНеПодтвержденных >= настройки.ПорогСрабатывания Тогда
				sendLog = True;
				лог.ДобавитьСтроку(СтрШаблон("%1; Имя плана:%2; Код узла: %3; Описание узла:%4; Количество не подтвержденных обменов: %5", 
									ТекущаяДатаСеанса(), //1
									имяПланаОбмена, //2
									выб.Узел.Код,	//3
									выб.Представление, //4
									?(выб.КоличествоНеПодтвержденных > 9, "более 9", выб.КоличествоНеПодтвержденных)//5
									)
								);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Если настройки.ИспользоватьЛогирование Тогда
		лог.Записать(настройки.ПутьКФайлуЛога);
	КонецЕсли;
	
	If sendLog = True Then
		ОтправитьEmail(лог, настройки.СписокАдресовОповещения.ВыгрузитьЗначения());
	EndIf;
КонецПроцедуры

Процедура ВыполнитьАнализОчередиДокументооборота() Экспорт
	настройки = ПолучитьНастройкиМониторингаОбменов();
	лог = Новый ТекстовыйДокумент;

	КоличествоНеОтправленных = ПолучитьКоличествоНеОтправленныхСообщенийДокументооборота();
	Если КоличествоНеОтправленных >= настройки.ПорогСрабатыванияДО Тогда
		лог.ДобавитьСтроку("Очередь документов для отправки в документооборот превысила:"+настройки.ПорогСрабатыванияДО);
		ОтправитьEmail(лог, настройки.СписокАдресовОповещенияДО.ВыгрузитьЗначения());
		
		Если настройки.ИспользоватьЛогирование Тогда
			лог.Записать(настройки.ПутьКФайлуЛогаДО);
		КонецЕсли;			
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьКоличествоНеОтправленныхСообщенийДокументооборота()	
	запрос = Новый Запрос("ВЫБРАТЬ
	                      |	КОЛИЧЕСТВО(РС.СсылкаНаОбъект) КАК КоличествоНеОтправленных
	                      |ИЗ
	                      |	РегистрСведений.СостоянияСогласованияВДокументообороте КАК РС
	                      |ГДЕ
	                      |	РС.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСогласованияВДокументообороте.Подготовлен)");
	выб = запрос.Выполнить().Выбрать();
	Если выб.Следующий() Тогда
		Возврат выб.КоличествоНеОтправленных;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

//вычисляет ссылку на узел обмена по ключу переданному из Zabbix
Функция ОпределитьУзелПоКлючу(ключ)
	узел = Неопределено;
	мОписаниеУзла = СтрРазделить(ключ,"_",Ложь);
	метаПланОбмена = Метаданные.НайтиПоТипу(ЗначениеИзСтрокиВнутр("{""T"","+мОписаниеУзла[0]+"}"));
	уидУзла = Новый УникальныйИдентификатор(мОписаниеУзла[1]);
	узел = ПланыОбмена[метаПланОбмена.Имя].ПолучитьСсылку(уидУзла);
	Возврат узел;
КонецФункции

Функция ПолучитьКоличествоНеОтправленныхСообщенийПоУзлу(узел) Экспорт
	//этот кусок кода в анализе очередей сообщений по планам обмена в разрезе узлов
	//практически полностью дублируется за исключением параметра &Узел,
	//но не вынесен в отдельную процедуру, т.к. в этом случае позволяет
	//выбрать состояние обмена по конкретному узлу,
	//а формирование универсального запроса сделает код менее читаемым
	метаПланОбмена = узел.Метаданные();			
	
	имяПланаОбмена 	= метаПланОбмена.Имя;
	полноеИмяПланаОбмена = метаПланОбмена.ПолноеИмя();
	
	//программно формируем текст запроса
	схемаЗапроса 	= Новый СхемаЗапроса;		
	первыйЗапрос 	= Истина;
	пакетЗапросов	= схемаЗапроса.ПакетЗапросов[0];
	операторы 		= пакетЗапросов.Операторы;
	операторы.Очистить();
	колонки			= пакетЗапросов.Колонки;		

	//формируем запрос номеров сообщений из всех таблиц регистрации изменений
	//для всех объектов из состава плана
	Для Каждого элт Из метаПланОбмена.Состав Цикл
		метаЭлт = элт.Метаданные;
		полноеИмя = метаЭлт.ПолноеИмя();
		Если первыйЗапрос Тогда
			оператор = операторы[0]; //присутствует в схеме по-умолчанию
			первыйЗапрос = Ложь;
		Иначе
			оператор = операторы.Добавить();
		КонецЕсли;
		
		источники 	= оператор.Источники;
		поля 		= оператор.ВыбираемыеПоля;
		отборы 		= оператор.Отбор;
		
		источник = источники.Добавить(полноеИмя+".Изменения", "Данные");
		количествоПлановОбмена = источник.Источник.ДоступныеПоля.Найти("Узел").ТипЗначения.Типы().Количество();
		
		поля.Добавить("Данные.Узел");
		поля.Добавить("Данные.НомерСообщения");			
					
		Если количествоПлановОбмена > 1 Тогда
			отборы.Добавить("Данные.Узел ССЫЛКА "+полноеИмяПланаОбмена);
		КонецЕсли;
		отборы.Добавить("isnull(Данные.НомерСообщения, 0) > 0");
		отборы.Добавить("Данные.Узел = &Узел");
	КонецЦикла;

	//создаем итоги по всем объединениям
	колонкаУзел 			= колонки.Получить(0);
	колонкаНомерСообщения 	= колонки.Получить(1);
	колонкаНомерСообщения.Псевдоним = "КоличествоНеПодтвержденных";

	итоги = пакетЗапросов.ВыраженияИтогов;
	итоги.Добавить("КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КоличествоНеПодтвержденных)", "КоличествоНеПодтвержденных");

	контрольныеТочкиИтогов = пакетЗапросов.КонтрольныеТочкиИтогов;
	контрольныеТочкиИтогов.Добавить("Узел");

	запрос = Новый Запрос(схемаЗапроса.ПолучитьТекстЗапроса());
	запрос.УстановитьПараметр("Узел", узел);

	выб = запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Узел");
	Если выб.Следующий() Тогда
		Возврат выб.КоличествоНеПодтвержденных;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

Функция ВыполнитьАнализОчередиПоКлючуУзла(ключ) Экспорт
	рез = 0;
	узел = ОпределитьУзелПоКлючу(ключ);
	Если узел.Метаданные() = Метаданные.ПланыОбмена.ИнтеграцияС1СДокументооборотом Тогда
		рез = ПолучитьКоличествоНеОтправленныхСообщенийДокументооборота();
	Иначе
		рез = ПолучитьКоличествоНеОтправленныхСообщенийПоУзлу(узел);
	КонецЕсли;	
	
	Возврат рез;
КонецФункции

#КонецОбласти

#Область ZabbixIntrface

//провереряет наличие элемента zabbix по узлу
//и если этого элемента нет, то создаем
//элемент по параметрам узла
Процедура НайтиИлиСоздатьЭлементZabbixПоУзлу(узел, токен)
	item = НайтиЭлементДанныхZabbixПоУзлуОбмена(узел, токен);
	Если item.result.Количество() = 0 Тогда
		СоздатьЭлементДанныхZabbixПоУзлуОбмена(узел, токен);
	КонецЕсли;	
КонецПроцедуры

Процедура НайтиИлиСоздатьТриггерZabbixПоУзлу(узел, токен)
	trigger = НайтиТриггерZabbixПоУзлу(узел, токен);
	Если trigger.result.Количество() = 0 Тогда
		СоздатьТриггерZabbixПоУзлу(узел, токен);
	КонецЕсли;
КонецПроцедуры

Процедура НайтиИлиСоздатьЭлементСТриггеромZabix(узел, токен)
	НайтиИлиСоздатьЭлементZabbixПоУзлу(узел, токен);
	НайтиИлиСоздатьТриггерZabbixПоУзлу(узел, токен);
КонецПроцедуры

//не универсальная процедура, т.к.
//план ИнтеграцияСДокументооборотом не имеет ни состава, ни узлов
//и для него элемент Zabbix формируется по ЭтотУзел
//
Процедура СформироватьЭлементыДанныхZabbix() Экспорт	
	метаПланыОбмена = Метаданные.ПланыОбмена;
	токен = Неопределено;
	
	Для Каждого метаПланОбмена Из метаПланыОбмена Цикл
		Если метаПланОбмена = метаПланыОбмена.ИнтеграцияС1СДокументооборотом Тогда
			//интеграция с документооборотом требует исключительной настройки
			узел = ПланыОбмена.ИнтеграцияС1СДокументооборотом.ЭтотУзел();
			НайтиИлиСоздатьЭлементСТриггеромZabix(узел, токен);
			Продолжить;
		КонецЕсли;
		
		имяПланаОбмена 	= метаПланОбмена.Имя;
		выб = ПланыОбмена[имяПланаОбмена].Выбрать();
		//обходим узлы плана обмена и создаем элементы Zabbix
		//для мониторинга
		//если у плана обмена нет узлов, то мониторинг не включается
		Пока выб.Следующий() Цикл
			Если выб.ЭтотУзел = Истина ИЛИ выб.ПометкаУдаления = Истина Тогда
				Продолжить;
			КонецЕсли;
			
			НайтиИлиСоздатьЭлементСТриггеромZabix(выб.Ссылка, токен);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

//формирует уникальный код элемента данных Zabbix, на 
//котором собираются данные мониторинга обменов
//для заданного узла обмена,
//ключ на узел полученный через "ЭтотУзел"
//формат ключа <уид типа узла обмена>_<уид узла обмена>
Функция СформироватьКлючУзлаZabbix(узел)
	мета = узел.Метаданные();
	стрОписаниеТипаУзла = ЗначениеВСтрокуВнутр(ТипЗнч(узел));
	мОписаниеТипаУзла =	СтрРазделить(СтрЗаменить(стрОписаниеТипаУзла,"}",""),",",Ложь);
	уидТипаУзла = мОписаниеТипаУзла[1];
	идУзла = узел.УникальныйИдентификатор();
	кодЭлементаДанных = СтрШаблон("%1_%2", уидТипаУзла, идУзла);
	
	Возврат кодЭлементаДанных;
КонецФункции

//формирует наименование элемента данных Zabbix, на 
//котором собираются данные мониторинга обменов
//для заданного узла обмена,
//если у плана обмена нет узлов, то формируем 
//наименование на узел полученный через "ЭтотУзел"
Функция СформироватьНаименованиеУзлаZabbix(узел)
	мета = узел.Метаданные();
	имяПлана = мета.Имя;
	кодУзла = узел.Код;
	имяУзла = узел.Наименование;
	идУзла  = "<"+узел.УникальныйИдентификатор()+">";
	имяЭлементаДанных =	СтрШаблон("Обмен:%1; Узел:%2-%3; УИД:%4", имяПлана, кодУзла, имяУзла, идУзла);
	
	Возврат имяЭлементаДанных;
КонецФункции

Функция ПарсингJSONОтвета(jsonОтвет, поляСДатами = "", заголовокОшибки = "") Экспорт
	чтение = Новый ЧтениеJSON;
	чтение.УстановитьСтроку(jsonОтвет);
	Попытка
		результат = ПрочитатьJSON(чтение,
							Ложь, //читаем в структуру
							СтрЗаменить(поляСДатами, " ", ""), //в данном параметре не допускается использование пробелов
											//например в строке "field1, field2" field2 обработано не будет, т.к. поиск 
											//интерпретирует имя реквизита как ' field2'
											//правильная строка описания полей "field1, field2"
							ФорматДатыJSON.ISO
						);
	Исключение
		ошибка = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("_Zabbix_", 
				УровеньЖурналаРегистрации.Ошибка, ,
				заголовокОшибки, 
				ошибка
		);

		ВызватьИсключение заголовокОшибки+":"+ошибка;
	КонецПопытки;

	Если результат.Свойство("error") Тогда
		ошибка = "code:"+результат.error.code
					+" data:"+результат.error.data
					+" message:"+результат.error.message;
					
		ЗаписьЖурналаРегистрации("_Zabbix_", 
				УровеньЖурналаРегистрации.Ошибка, ,
				заголовокОшибки, 
				ошибка
		);
		ВызватьИсключение заголовокОшибки+":"+ошибка;
	КонецЕсли;
	
	Возврат результат;
КонецФункции

Функция ОтправитьЗапрос(ЗапросКСервису)
	настройки = ПолучитьНастройкиМониторингаОбменов();
	
    Соединение = Новый HTTPСоединение(СокрЛП(настройки.Сервер),настройки.Порт,,,,?(настройки.Таймаут = 0, 20, настройки.Таймаут));
	
    Запрос = Новый HTTPЗапрос(настройки.Сервис);
    
	Запрос.Заголовки.Вставить("Content-Type", "application/json-rpc");
	Запрос.УстановитьТелоИзСтроки(ЗапросКСервису);	
	Ответ = Соединение.Post(Запрос);
	
	Если Ответ.КодСостояния <> 200 Тогда
		стрОтвет = Ответ.ПолучитьТелоКакСтроку();
		
		заголовки = "";
		Для Каждого элт Из Ответ.Заголовки Цикл
			заголовки = заголовки+элт.Ключ+":"+элт.Значение+";"+Символы.ПС;
		КонецЦикла;
		
		описание = "Ошибка отправки данных. Код ответа:"+Ответ.КодСостояния+" "+заголовки+" "+стрОтвет; 
		ЗаписьЖурналаРегистрации("_Zabbix_", 
				УровеньЖурналаРегистрации.Ошибка, ,
				"Мониторинг обменов.", 
				описание
		);

		ВызватьИсключение описание;
    КонецЕсли;
	
	Возврат Ответ;	
КонецФункции

Функция АвторизацияZabbix()
	настройки = ПолучитьНастройкиМониторингаОбменов();
	
	json =" 
	|{
	|    ""jsonrpc"": ""2.0"",
	|    ""method"": ""user.login"",
	|    ""params"": {
	|        ""user"": ""%1"",
	|        ""password"": ""%2""
	|    },
    |	""id"": 1,
    |	""auth"": null
	|}"; //шаблон вызова авторизации
	
	json = СтрШаблон(json, настройки.Login, настройки.Password);
	ответ = ОтправитьЗапрос(json);
	
	Возврат ПарсингJSONОтвета(ответ.ПолучитьТелоКакСтроку(),,"Ошибка авторизации Zabbix");
КонецФункции

Функция НайтиЭлементДанныхZabbixПоУзлуОбмена(узел, токен = Неопределено)
	Если токен = Неопределено Тогда
		токен = АвторизацияZabbix();
	КонецЕсли;
	
	настройки = ПолучитьНастройкиМониторингаОбменов();
	
	json = "
	|{
    |""jsonrpc"": ""2.0"",
    |""method"": ""item.get"",
    |""params"": {
    |    ""output"": ""extend"",
    |    ""hostids"": ""%1"",
    |    ""search"": {
    |        ""key_"": ""%2""
    |    },
    |    ""sortfield"": ""name""
    |},
    |""auth"": ""%3"",
    |""id"": %4
	|}";
	
	json = СтрШаблон(
				json,
			    XMLСтрока(настройки.HostID), //1
				//СформироватьНаименованиеУзлаZabbix(узел), //2
				СформироватьКлючУзлаZabbix(узел), //2
				токен.result, //3
				токен.id //4
	);
	
	ответ = ОтправитьЗапрос(json);
	
	Возврат ПарсингJSONОтвета(ответ.ПолучитьТелоКакСтроку(),,"Ошибка определения узла Zabbix");
КонецФункции

Функция ПолучитьМассивИнтерфейсовХостаZabbix(токен = Неопределено)
	Если токен = Неопределено Тогда
		токен = АвторизацияZabbix();
	КонецЕсли;
	
	настройки = ПолучитьНастройкиМониторингаОбменов();
		
	json = "
	|{
	|    ""jsonrpc"": ""2.0"",
	|    ""method"": ""hostinterface.get"",
	|    ""params"": {
	|        ""output"": ""extend"",
	|        ""hostids"": ""%1""
	|    },
	|    ""auth"": ""%2"",
	|    ""id"": %3
	|}";
	
	json = СтрШаблон(
				json,
				XMLСтрока(настройки.HostID), //1
				токен.result, //2
				токен.id //3
	);
	
	ответ = ОтправитьЗапрос(json);
	
	jsonОтвет = ПарсингJSONОтвета(ответ.ПолучитьТелоКакСтроку(),,"Ошибка определения интерфейсов хоста Zabbix");	
	Возврат jsonОтвет;
КонецФункции

Функция СоздатьЭлементДанныхZabbixПоУзлуОбмена(узел, токен = Неопределено)
	//создает элемент данных Zabbix типа HTTPagent
	//https://www.zabbix.com/documentation/4.2/manual/api/reference/item/create#creating_an_item_with_preprocessing
	//
	
	Если токен = Неопределено Тогда
		токен = АвторизацияZabbix();
	КонецЕсли;
	
	настройки = ПолучитьНастройкиМониторингаОбменов();
	интерфейсы = ПолучитьМассивИнтерфейсовХостаZabbix(токен).result;
	интерфейсИд = "1";
	Если интерфейсы.Количество() > 0 Тогда
		интерфейсИд = интерфейсы[0].interfaceid;
	КонецЕсли;
	
	идЭлементаZabbix 	= СформироватьКлючУзлаZabbix(узел); //2
	стрТаймаут1С 		= XMLСтрока(настройки.Таймаут1С);
	стрПериодОпроса1С 	= XMLСтрока(настройки.ПериодОпроса1С);
	json = "
	|{
	|    ""jsonrpc"": ""2.0"",
	|    ""method"": ""item.create"",
	|    ""params"": {
	|        ""name"": """+СформироватьНаименованиеУзлаZabbix(узел)+""",
	|        ""key_"": """+идЭлементаZabbix+""",
	|        ""hostid"": """+XMLСтрока(настройки.HostID)+""",
	//type 19 = НttpAgent
	|        ""type"": ""19"", 
	|		 ""url"" : """+настройки.UrlСервисаМониторинга1С+""",
	|        ""value_type"": ""4"",
	|	     ""interfaceid"": """+интерфейсИд+""",
	|        ""delay"": """+стрПериодОпроса1С+"s;"+стрПериодОпроса1С+"s/1-7,00:00-24:00"",
	|		 ""timeout"":"""+стрТаймаут1С+"s"",
	|		 ""post_type"": ""2"",
	|		 ""posts"": ""{}"",
	|		 ""query_fields"": [{""id"":"""+идЭлементаZabbix+"""}],
	|		 ""authtype"" : ""1"",
	|		 ""username"" : """+настройки.Логин1С+""",
	|		 ""password"" : """+настройки.Пароль1С+""",
	|	     ""preprocessing"": [
	|        {
	|            ""type"": ""12"",
	|            ""params"": ""$.MessageCount"",
    |             ""error_handler"": ""1"",
    |             ""error_handler_params"": """"	
	|        }
	|    ]
	|    },
	|    ""auth"": """+токен.result+""",
	|    ""id"": "+токен.id+"
	|}";
	
	ответ = ОтправитьЗапрос(json);
	jsonОтвет = ПарсингJSONОтвета(ответ.ПолучитьТелоКакСтроку(),,"Ошибка создания узла Zabbix");
	Возврат jsonОтвет;
КонецФункции

//имя триггера полностью соответствует имени элемента Zabbix, 
//на который он настроен.
//имя элемента генерится по узлу обмена
Функция НайтиТриггерZabbixПоУзлу(узел, токен = Неопределено) Экспорт
	
	Если токен = Неопределено Тогда
		токен = АвторизацияZabbix();
	КонецЕсли;
	
	настройки = ПолучитьНастройкиМониторингаОбменов();
	item = НайтиЭлементДанныхZabbixПоУзлуОбмена(узел, токен);
	идЭлемента = item.result[0].itemid;
	//имяЭлемента = СформироватьНаименованиеУзлаZabbix(узел);
	
	json = "
	|{
	|    ""jsonrpc"": ""2.0"",
	|    ""method"": ""trigger.get"",
	|    ""params"": {
	|	 		""hostids"": ""%1"",
	|			""itemids"":""%2""
	|    },
	|    ""auth"": ""%3"",
	|    ""id"": %4
	|}";
	
	json = СтрШаблон(json, XMLСтрока(настройки.HostID), идЭлемента, токен.result, токен.id);
	ответ = ОтправитьЗапрос(json);  
	jsonОтвет =  ПарсингJSONОтвета(ответ.ПолучитьТелоКакСтроку(),,"Ошибка поиска триггера по узлу Zabbix");
	Возврат jsonОтвет;
КонецФункции

Функция ПолучитьПорогСрабатыванияПоУзлу(узел)
	настройки = ПолучитьНастройкиМониторингаОбменов();
	Если узел.Метаданные() = Метаданные.ПланыОбмена.ИнтеграцияС1СДокументооборотом Тогда
		Возврат настройки.ПорогСрабатыванияДО;
	Иначе
		Возврат настройки.ПорогСрабатывания;
	КонецЕсли;
КонецФункции

Функция СоздатьТриггерZabbixПоУзлу(узел, токен = Неопределено) Экспорт
	//https://www.zabbix.com/documentation/4.2/manual/api/reference/trigger/object
	Если токен = Неопределено Тогда
		токен = АвторизацияZabbix();
	КонецЕсли;
	
	настройки = ПолучитьНастройкиМониторингаОбменов();
	item = НайтиЭлементДанныхZabbixПоУзлуОбмена(узел, токен);
	идЭлемента = XMLСтрока(item.result[0].itemid);
	описаниеТриггера = СформироватьНаименованиеУзлаZabbix(узел);
	
	имяХоста = ПолучитьИмяХостаZabbix(токен);
	ключ = СформироватьКлючУзлаZabbix(узел);
	порог = ПолучитьПорогСрабатыванияПоУзлу(узел);
	
	expr = СтрШаблон("{%1:%2.last()}>=%3", имяХоста, ключ, порог);								
	recovery_expr = СтрШаблон("{%1:%2.last()}<%3", имяХоста, ключ, порог);
	
	json = "
	|{
	|    ""jsonrpc"": ""2.0"",
	|    ""method"": ""trigger.create"",
	|	 ""params"": {
	//|		""hostids"":""%1"",
	//|		""itemid"":""%2"",
	|		""description"":""%1"",
	|		""expression"":""%2"",
	|		""manual_close"":""1"",
	////    priority = 2 is warning
	|		""priority"":""2"",
	|		""type"":""0"",
	|		""recovery_expression"":""%3"",
	|		""recovery_mode"": ""1"",
	|		""correlation_mode"":""0"",
	|		""status"":""0""
	|	},
	|    ""auth"": ""%4"",
	|    ""id"": %5
	|}";
	
	json = СтрШаблон(json, 				
				описаниеТриггера, //1
				expr,         //2
				recovery_expr, //3
				токен.result, //4
				токен.id //5
				); 
	ответ = ОтправитьЗапрос(json);
	jsonОтвет = ПарсингJSONОтвета(ответ.ПолучитьТелоКакСтроку(),,"Ошибка создания триггера Zabbix");
	Возврат jsonОтвет;
КонецФункции

Функция ПолучитьИмяХостаZabbix(токен = Неопределено)
	Если токен = Неопределено Тогда
		токен = АвторизацияZabbix();
	КонецЕсли;
	
	настройки = ПолучитьНастройкиМониторингаОбменов();
	
	json = "
	|{
	|    ""jsonrpc"": ""2.0"",
	|    ""method"": ""host.get"",
	|    ""params"": {
	|        ""output"": [""host""],	        
	|        ""hostids"": ""%1""
	|    },
	|	""auth"": ""%2"",
	|    ""id"": %3 
	|}";
	
	json = СтрШаблон(json, XMLСтрока(настройки.HostID), токен.result, токен.id);
	ответ = ОтправитьЗапрос(json);  
	jsonОтвет =  ПарсингJSONОтвета(ответ.ПолучитьТелоКакСтроку(),,"Ошибка запрос хоста мониторинга обменов Zabbix");
	Возврат jsonОтвет.result[0].host;
КонецФункции
#КонецОбласти
